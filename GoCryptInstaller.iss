; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; Define the AppVersion preprocessor variable
#define AppVersion "1.1"

; General settings
PrivilegesRequired=admin
ArchitecturesInstallIn64BitMode=x64
AppId={{E4DAD780-F78A-406B-9B64-CCCE67B6C119}}
AppName=GoCrypt
AppVersion={#AppVersion}
DefaultDirName={autopf}\GoCrypt
DefaultGroupName=GoCrypt
OutputBaseFilename=GoCrypt-Installer-{#AppVersion}
Compression=lzma
SolidCompression=yes
LicenseFile=LICENSE
AppPublisher=Queball1999
AppPublisherURL=https://github.com/queball1999/GoCrypt
UninstallDisplayIcon={app}\gocrypt.exe

[Files]
; Including the GoCrypt executable
Source: "gocrypt.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "main.go"; DestDir: "{app}"; Flags: ignoreversion
Source: "icon.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "README.md"; DestDir: "{app}"; Flags: ignoreversion
Source: "LICENSE"; DestDir: "{app}"; Flags: ignoreversion

Source: "encryption\*"; DestDir: "{app}\encryption"; Flags: recursesubdirs createallsubdirs ignoreversion
Source: "fileutils\*"; DestDir: "{app}\fileutils"; Flags: recursesubdirs createallsubdirs ignoreversion
Source: "ui\*"; DestDir: "{app}\ui"; Flags: recursesubdirs createallsubdirs ignoreversion
Source: "images\*"; DestDir: "{app}\images"; Flags: recursesubdirs createallsubdirs ignoreversion

[Icons]
; Creating a desktop icon for the application
;Name: "{commondesktop}\GoCrypt"; Filename: "{app}\gocrypt.exe"

[Tasks]
; Task to associate .enc files with GoCrypt
Name: "associateenc"; Description: "Associate .enc files with GoCrypt"; GroupDescription: "File associations:"

; Task to add GoCrypt to system PATH
Name: "addtopath"; Description: "Add GoCrypt to the system PATH"; GroupDescription: "Additional tasks:"

[Run]
; Optional: Launch the application after installation
;Filename: "{app}\gocrypt.exe"; Description: "{cm:LaunchProgram,GoCrypt}"; Flags: nowait postinstall skipifsilent

[Registry]
; Create QCrypt context menu item for all files and folders
Root: HKCR; Subkey: "*\shell\GoCrypt"; ValueType: string; ValueName: "MUIVerb"; ValueData: "GoCrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKCR; Subkey: "*\shell\GoCrypt"; ValueType: string; ValueName: "SubCommands"; ValueData: "GoCryptEncrypt;GoCryptDecrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKCR; Subkey: "*\shell\GoCrypt"; ValueType: string; ValueName: "Icon"; ValueData: "{app}\gocrypt.exe"; Flags: uninsdeletekey createvalueifdoesntexist

; Create QCrypt context menu item for directories
Root: HKCR; Subkey: "Directory\shell\GoCrypt"; ValueType: string; ValueName: "MUIVerb"; ValueData: "GoCrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKCR; Subkey: "Directory\shell\GoCrypt"; ValueType: string; ValueName: "SubCommands"; ValueData: "GoCryptEncrypt;GoCryptDecrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKCR; Subkey: "Directory\shell\GoCrypt"; ValueType: string; ValueName: "Icon"; ValueData: "{app}\gocrypt.exe"; Flags: uninsdeletekey createvalueifdoesntexist

; Subcommand for Encrypt
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptEncrypt"; ValueType: string; ValueName: ""; ValueData: "Encrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptEncrypt"; ValueType: string; ValueName: "Icon"; ValueData: "{app}\gocrypt.exe"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptEncrypt\command"; ValueType: string; ValueName: ""; ValueData: """{app}\gocrypt.exe"" encrypt ""%1"""; Flags: uninsdeletekey createvalueifdoesntexist

; Subcommand for Decrypt
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptDecrypt"; ValueType: string; ValueName: ""; ValueData: "Decrypt"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptDecrypt"; ValueType: string; ValueName: "Icon"; ValueData: "{app}\gocrypt.exe"; Flags: uninsdeletekey createvalueifdoesntexist
Root: HKLM; Subkey: "SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\CommandStore\shell\GoCryptDecrypt\command"; ValueType: string; ValueName: ""; ValueData: """{app}\gocrypt.exe"" decrypt ""%1"""; Flags: uninsdeletekey createvalueifdoesntexist

; Conditionally associate .enc files with GoCrypt based on the checkbox selection
Root: HKCR; Subkey: ".enc"; ValueType: string; ValueName: ""; ValueData: "GoCrypt.encfile"; Flags: uninsdeletekey; Tasks: associateenc
Root: HKCR; Subkey: "GoCrypt.encfile"; ValueType: string; ValueName: ""; ValueData: "GoCrypt Encrypted File"; Flags: uninsdeletekey; Tasks: associateenc
Root: HKCR; Subkey: "GoCrypt.encfile\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\gocrypt.exe,0"; Flags: uninsdeletekey; Tasks: associateenc
Root: HKCR; Subkey: "GoCrypt.encfile\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\gocrypt.exe"" decrypt ""%1"""; Flags: uninsdeletekey; Tasks: associateenc

[Code]
function InitializeSetup(): Boolean;
begin
  Result := True;
end;

procedure AddToSystemAndUserPath(PathToAdd: string);
var
  CurrentPath, NewPath: string;
begin
  // Update system-level PATH
  if RegQueryStringValue(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', CurrentPath) then
  begin
    if Pos(';' + PathToAdd + ';', ';' + CurrentPath + ';') = 0 then
    begin
      if (CurrentPath <> '') and (CurrentPath[Length(CurrentPath)] <> ';') then
        CurrentPath := CurrentPath + ';';
      NewPath := CurrentPath + PathToAdd;
      RegWriteStringValue(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', NewPath);
    end;
  end;

  // Update user-level PATH
  if RegQueryStringValue(HKCU, 'Environment', 'Path', CurrentPath) then
  begin
    if Pos(';' + PathToAdd + ';', ';' + CurrentPath + ';') = 0 then
    begin
      if (CurrentPath <> '') and (CurrentPath[Length(CurrentPath)] <> ';') then
        CurrentPath := CurrentPath + ';';
      NewPath := CurrentPath + PathToAdd;
      RegWriteStringValue(HKCU, 'Environment', 'Path', NewPath);
    end;
  end;
end;

procedure RemoveFromSystemAndUserPath(PathToRemove: string);
var
  CurrentPath, NewPath: string;
  PosToRemove: Integer;
begin
  // Remove from system-level PATH
  if RegQueryStringValue(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', CurrentPath) then
  begin
    PosToRemove := Pos(';' + PathToRemove, CurrentPath);
    if PosToRemove > 0 then
    begin
      Delete(CurrentPath, PosToRemove, Length(';' + PathToRemove));
      RegWriteStringValue(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', CurrentPath);
    end;
  end;

  // Remove from user-level PATH
  if RegQueryStringValue(HKCU, 'Environment', 'Path', CurrentPath) then
  begin
    PosToRemove := Pos(';' + PathToRemove, CurrentPath);
    if PosToRemove > 0 then
    begin
      Delete(CurrentPath, PosToRemove, Length(';' + PathToRemove));
      RegWriteStringValue(HKCU, 'Environment', 'Path', CurrentPath);
    end;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    AddToSystemAndUserPath(ExpandConstant('{app}'));
    MsgBox('Installation complete! To use GoCrypt, simply right-click on any file or folder and select the "GoCrypt" option from the context menu.', mbInformation, MB_OK);
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usUninstall then
  begin
    RemoveFromSystemAndUserPath(ExpandConstant('{app}'));
  end;
end;